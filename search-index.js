var searchIndex = JSON.parse('{\
"near_sdk":{"doc":"","t":[12,12,3,3,6,6,6,24,6,4,6,13,6,13,13,13,8,24,6,3,3,8,6,6,3,6,13,13,13,13,6,6,6,17,18,17,24,3,3,13,4,6,6,4,4,6,3,6,13,4,3,13,6,6,6,13,13,6,3,3,6,6,13,13,4,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,23,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,0,12,14,14,11,0,11,11,11,11,11,11,11,11,11,11,23,11,11,11,12,10,11,11,11,11,12,12,12,12,12,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,12,11,12,12,11,11,11,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,17,17,17,3,3,3,3,3,2,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,12,3,6,3,4,13,3,3,13,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,3,3,13,13,4,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5],"n":["0","0","Abort","AccountId","Balance","BlockHeight","BlockHeightDelta","BorshStorageKey","CryptoHash","CurveType","Duration","ED25519","EpochHeight","Failed","Failed","Failed","FunctionError","FunctionError","GCCount","Gas","GasWeight","IntoStorageKey","IteratorIndex","MerkleHash","MockedBlockchain","Nonce","None","NotReady","NotReady","NotReady","NumBlocks","NumSeats","NumShards","ONE_NEAR","ONE_TERA","ONE_YOCTO","PanicOnDefault","ParseAccountIdError","Promise","Promise","PromiseError","PromiseId","PromiseIndex","PromiseOrValue","PromiseResult","ProtocolVersion","PublicKey","ReceiptIndex","ReceiptIndex","ReturnData","RuntimeFeesConfig","SECP256K1","ShardId","StorageUsage","StorageUsageChange","Successful","Successful","Timestamp","VMConfig","VMContext","ValidatorId","ValidatorMask","Value","Value","VmPromiseResult","account_balance","account_locked_balance","action_creation_config","action_receipt_creation_config","add","add_access_key","add_access_key_with_nonce","add_assign","add_definitions_recursively","add_definitions_recursively","add_definitions_recursively","add_definitions_recursively","add_full_access_key","add_full_access_key_with_nonce","and","as_bytes","as_bytes","as_ref","as_return","as_str","as_value","attached_deposit","block_index","block_timestamp","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","burnt_gas_reward","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","collections","create_account","current_account_id","curve_type","data_receipt_creation_config","declaration","declaration","declaration","declaration","default","default","delete_account","delete_key","deploy_contract","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","drop","env","epoch_height","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ext_contract","ext_costs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","free","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","function_call","function_call_weight","grow_mem_cost","hash","hash","hash","hash","hash","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_storage_key","is_view","json_types","limit_config","log","metadata","min_receipt_with_function_call_gas","mock","mul","ne","ne","ne","ne","ne","ne","ne","ne","ne","near_bindgen","new","new_unchecked","non_crypto_hash","output_data_receivers","panic","panic","partial_cmp","partial_cmp","partial_cmp","pessimistic_gas_price_inflation_ratio","predecessor_account_id","prepaid_gas","random_seed","regular_op_cost","rem","require","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","setup_alloc","signer_account_id","signer_account_pk","stake","storage_usage","storage_usage_config","sub","sub_assign","test","test","test_utils","testing_env","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transfer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utils","view_config","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","ERR_ELEMENT_DESERIALIZATION","ERR_ELEMENT_SERIALIZATION","ERR_INCONSISTENT_STATE","LazyOption","LegacyTreeMap","LookupMap","LookupSet","TreeMap","UnorderedMap","UnorderedSet","Vector","as_vector","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil_key","ceil_key","clear","clear","clear","contains","contains","contains_key","contains_key","contains_key","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","extend","extend","extend","floor_key","floor_key","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","get","get","higher","higher","insert","insert","insert","insert","insert","insert_raw","insert_raw","insert_raw","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_none","is_some","iter","iter","iter","iter_from","iter_from","iter_rev","iter_rev","iter_rev_from","iter_rev_from","len","len","len","lower","lower","max","max","min","min","new","new","new","new","new","new","range","range","remove","remove","remove","remove","remove","remove","remove_raw","remove_raw","remove_raw","replace","serialize","serialize","serialize","serialize","serialize","serialize","set","take","to_vec","to_vec","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unordered_map","vector","vzip","vzip","vzip","vzip","vzip","vzip","Iter","UnorderedMap","borrow","borrow","borrow_mut","borrow_mut","clear","count","deserialize","extend","fmt","from","from","get","insert","insert_raw","into","into","into_iter","into_iter","is_empty","iter","keys","keys_as_vector","len","new","next","next_back","nth","nth_back","remove","remove_raw","serialize","size_hint","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","values","values_as_vector","vzip","vzip","Iter","RawIter","Vector","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","count","count","deserialize","extend","extend_raw","fmt","from","from","from","get","get_raw","into","into","into","into_iter","into_iter","is_empty","iter","iter_raw","len","new","next","next","next_back","next_back","nth","nth","nth_back","nth_back","pop","pop_raw","push","push_raw","replace","replace_raw","serialize","size_hint","size_hint","swap_remove","swap_remove_raw","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","STORAGE_PRICE_PER_BYTE","abort","account_balance","account_locked_balance","attached_deposit","block_height","block_index","block_timestamp","block_timestamp_ms","current_account_id","epoch_height","input","is_valid_account_id","keccak256","keccak256_array","keccak512","keccak512_array","log","log_str","panic","panic_str","predecessor_account_id","prepaid_gas","promise_and","promise_batch_action_add_key_with_full_access","promise_batch_action_add_key_with_function_call","promise_batch_action_create_account","promise_batch_action_delete_account","promise_batch_action_delete_key","promise_batch_action_deploy_contract","promise_batch_action_function_call","promise_batch_action_function_call_weight","promise_batch_action_stake","promise_batch_action_transfer","promise_batch_create","promise_batch_then","promise_create","promise_result","promise_results_count","promise_return","promise_then","random_seed","random_seed_array","read_register","register_len","ripemd160_array","set_blockchain_interface","setup_panic_hook","sha256","sha256_array","signer_account_id","signer_account_pk","state_exists","state_read","state_write","storage_byte_cost","storage_get_evicted","storage_has_key","storage_read","storage_remove","storage_usage","storage_write","used_gas","validator_stake","validator_total_stake","value_return","0","0","0","0","0","Base58CryptoHash","Base58PublicKey","Base64VecU8","CurveType","ED25519","I128","I64","SECP256K1","U128","U64","ValidAccountId","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","into","into","into","into","into","into","into","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AddKeyWithFullAccess","AddKeyWithFunctionCall","CreateAccount","DeleteAccount","DeleteKey","DeployContract","FunctionCall","MockedBlockchain","Receipt","Stake","Transfer","VmAction","actions","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","created_receipts","default","eq","eq","fmt","fmt","from","from","from","gas","into","into","into","logs","ne","ne","new","receiver_id","take_storage","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_mocked_blockchain","allowance","args","beneficiary_id","code","deposit","deposit","function_name","function_names","gas","nonce","nonce","public_key","public_key","public_key","public_key","receiver_id","stake","VMContextBuilder","account_balance","account_locked_balance","accounts","attached_deposit","block_index","block_timestamp","borrow","borrow_mut","build","clone","clone_into","context","current_account_id","default","epoch_height","from","get_created_receipts","get_logs","into","is_view","new","predecessor_account_id","prepaid_gas","random_seed","signer_account_id","signer_account_pk","storage_usage","test_env","testing_env_with_promise_results","to_owned","try_from","try_into","type_id","vzip","alice","bob","carol","setup","setup_free","setup_with_config","assert_one_yocto","assert_self","is_promise_success","promise_result_as_success"],"q":["near_sdknear_sdk::PromiseOrValue","","near_sdk::PromiseResult","near_sdk::ReturnData","","near_sdk::VmPromiseResult","near_sdk::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::collections::unordered_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::collections::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::json_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::mock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::mock::VmAction","","","","","","","","","","","","","","","","","near_sdk::test_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::test_utils::test_env","","","","","","near_sdk::utils","","",""],"d":["","","A simple type used in conjunction with FunctionError …","Account identifier. This is the human readable utf8 string …","Balance is a type for storing amounts of tokens, specified …","Height of the block.","Block height delta that measures the difference between …","<code>BorshStorageKey</code> generates implementation for …","Raw type for 32 bytes of the hash.","PublicKey curve","Raw type for duration in nanoseconds","","Height of the epoch.","","","Promise result failed.","Enables contract runtime to panic with the given type. Any …","<code>FunctionError</code> generates implementation for …","","Represents the amount of NEAR tokens in “gas units” …","Weight of unused gas to use with …","Converts Self into a <code>Vec&lt;u8&gt;</code> that is used for a storage …","","Hash used by a struct implementing the Merkle tree.","Mocked blockchain that can be used in the tests for the …","Nonce for transactions.","Method hasn’t returned any data or promise.","Current version of the protocol never returns …","Current version of the protocol never returns …","Current version of the protocol never returns this variant.","Number of blocks in current group.","Number of seats of validators (block producer or hidden …","Number of shards in current group.","Balance of one NEAR, which is 10^24 Yocto NEAR.","One Tera gas, which is 10^12 gas units.","Balance of one Yocto NEAR, which is the smallest …","<code>PanicOnDefault</code> generates implementation for <code>Default</code> trait …","","A structure representing a result of the scheduled …","","All error variants which can occur with promise results.","","Promise index that is computed only once.","When the method can return either a promise or a value, it …","When there is a callback attached to one or more contract …","","Public key in a binary format with base58 string …","An index of Receipt to append an action","The return value of the method should be taken from the …","","","","Shard index, from 0 to NUM_SHARDS - 1.","StorageUsage is used to count the amount of storage used …","StorageUsageChange is used to count the storage usage …","","","Raw type for timestamp in nanoseconds","","Context for the contract execution.","Validator identifier in current group.","Mask which validators participated in multi sign.","Method returned some value or data.","","When there is a callback attached to one or more contract …","The balance attached to the given account. Excludes the …","The balance of locked tokens on the given account.","Describes the cost of creating a certain action, <code>Action</code>. …","Describes the cost of creating an action receipt, …","","Add an access key that is restricted to only calling a …","Add an access key with a provided nonce.","","","","","","Add full access key to the given account.","Add full access key to the given account with a provided …","Merge this promise with another promise, so that we can …","Returns a byte slice of this <code>PublicKey</code>’s contents.","Returns reference to the account ID bytes.","","A specialized, relatively low-level API method. Allows to …","Returns reference to the account ID string.","Function to extract value from ReturnData.","The balance that was attached to the call that will be …","The current block height.","The current block timestamp (number of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fraction of the burnt gas to reward to the contract …","","","","","","","","","","","","","","","","","","","","","","Collections that offer an alternative to standard …","Create account on which this promise acts.","The account id of the current contract that we are …","Get info about the CurveType for this public key","Describes the cost of creating a data receipt, <code>DataReceipt</code>.","","","","","","","Delete the given account.","Delete access key from the given account.","Deploy a smart contract to the account on which this …","","","","","","","","","","","","","Blockchain-specific methods available to the smart …","The current epoch height.","","","","","","","","","","","","","<code>ext_contract</code> takes a Rust Trait and converts it to a …","Costs for runtime externals","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","A low-level interface for making a function call to the …","A low-level interface for making a function call to the …","Gas cost of a growing memory by single page.","","","","","","The input to the contract call. Encoded as base64 string …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>PublicKey</code> into a byte vector.","Consumes self and returns <code>Vec&lt;u8&gt;</code> bytes which are used as …","","Helper types for JSON serialization.","Describes limits for VM and Runtime.","Helper macro to log a message through <code>env::log_str</code>. This …","<code>metadata</code> generates the metadata method and should be …","The minimum amount of gas required to create and execute a …","Mock blockchain utilities. These can only be used inside …","","","","","","","","","","","This attribute macro is used on a struct and its …","Create a promise that acts on the given account.","Caller must ensure that the account id is valid.","Computes non-cryptographically-proof hash. The computation …","How many <code>DataReceipt</code>’s should receive this execution …","","","","","","Pessimistic gas price inflation ratio.","If this execution is the result of cross-contract call or …","The gas attached to the call that can be used to pay for …","Initial seed for randomness","Gas cost of a regular operation.","","Helper macro to create assertions that will panic through …","","","","","","","","","","","","","","","Deprecated helper function which used to generate code to …","The account id of that signed the original transaction …","The public key that was used to sign the original …","Stake the account for the given amount of tokens using the …","The account’s storage usage before the contract execution","Describes fees for storage.","","","","","Testing blockchain utilities. These can only be used …","Initializes a testing environment to mock interactions …","Schedules execution of another promise right after the …","","","","","","","","","","","","Transfer tokens to the account that this promise acts on.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper methods that often used in smart contracts.","If Some, it means that execution is made in a view mode …","","","","","","","","","","","","","","","","","","","","","","","","","An persistent lazy option, that stores a value in the …","TreeMap based on AVL-tree","An non-iterable implementation of a map that stores its …","An non-iterable implementation of a set that stores its …","TreeMap based on AVL-tree","","An iterable implementation of a set that stores its …","","Returns a view of elements as a vector. It’s sometimes …","","","","","","","","","","","","","Returns the smallest key that is greater or equal to key …","Returns the smallest key that is greater or equal to key …","","Clears the map, removing all elements.","Clears the tree, removing all elements.","Returns true if the set contains an element.","Returns true if the set contains an element.","","Returns true if the map contains a given key.","Returns true if the map contains a given key.","","","","","","","Inserts all new key-values from the iterator and replaces …","","","Returns the largest key that is less or equal to key given …","Returns the largest key that is less or equal to key given …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the value corresponding to the key.","Gets the value from storage and returns it as an option.","Returns the value corresponding to the key.","Returns the smallest key that is strictly greater than key …","Returns the smallest key that is strictly greater than key …","","Inserts a key-value pair into the map. If the map did not …","Adds a value to the set. If the set did not have this …","Adds a value to the set. If the set did not have this …","Inserts a key-value pair into the tree. If the tree did …","Inserts a serialized key-value pair into the map. If the …","Inserts a serialized element into the set. If the set did …","Adds a value to the set. If the set did not have this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the set contains no elements.","","Returns <code>true</code> if the value is not present in the storage.","Returns <code>true</code> if the value is present in the storage.","Iterate all entries in ascending order: min to max, both …","Iterate over deserialized elements.","Iterate all entries in ascending order: min to max, both …","Iterate entries in ascending order: given key (exclusive) …","Iterate entries in ascending order: given key (exclusive) …","Iterate all entries in descending order: max to min, both …","Iterate all entries in descending order: max to min, both …","Iterate entries in descending order: given key (exclusive) …","Iterate entries in descending order: given key (exclusive) …","","Returns the number of elements in the set, also referred …","Returns the number of elements in the tree, also referred …","Returns the largest key that is strictly less than key …","Returns the largest key that is strictly less than key …","Returns the largest stored key from the tree","Returns the largest stored key from the tree","Returns the smallest stored key from the tree","Returns the smallest stored key from the tree","","Create a new map. Use <code>key_prefix</code> as a unique prefix for …","Create a new map. Use <code>element_prefix</code> as a unique prefix …","Create new map with zero elements. Use <code>id</code> as a unique …","Create a new lazy option with the given <code>storage_key</code> and …","Makes a new, empty TreeMap","Iterate entries in ascending order according to specified …","Iterate entries in ascending order according to specified …","","Removes a key from the map, returning the value at the key …","Removes a value from the set. Returns whether the value …","Removes a value from the set. Returns whether the value …","Removes the value from storage without reading it. Returns …","Removes a key from the tree, returning the value at the …","Removes a serialized key from the map, returning the …","Removes a serialized element from the set. Returns true if …","Removes a value from the set. Returns whether the value …","Replaces the value in the storage and returns the previous …","","","","","","","Sets the value into the storage without reading the …","Removes the value from storage and returns it as an option.","Helper function which creates a [<code>Vec&lt;(K, V)&gt;</code>] of all items …","Copies elements into an <code>std::vec::Vec</code>.","Helper function which creates a [<code>Vec&lt;(K, V)&gt;</code>] of all items …","","","","","","","","","","","","","","","","","","","A map implemented on a trie. Unlike …","A vector implemented on a trie. Unlike standard vector …","","","","","","","An iterator over each element deserialized in the …","An iterable implementation of a map that stores its …","","","","","Clears the map, removing all elements.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the value corresponding to the key.","Inserts a key-value pair into the map. If the map did not …","Inserts a serialized key-value pair into the map. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the map contains no elements.","Iterate over deserialized keys and values.","An iterator visiting all keys. The iterator element type …","Returns a view of keys as a vector. It’s sometimes …","Returns the number of elements in the map, also referred …","Create new map with zero elements. Use <code>prefix</code> as a unique …","","","","","Removes a key from the map, returning the value at the key …","Removes a serialized key from the map, returning the …","","","Copies elements into an <code>std::vec::Vec</code>.","","","","","","","An iterator visiting all values. The iterator element type …","Returns a view of values as a vector. It’s sometimes …","","","An iterator over each element deserialized in the <code>Vector</code>.","An iterator over raw serialized bytes of each element in …","An iterable implementation of vector that stores its …","","","","","","","Removes all elements from the collection.","","","","Extends vector from the given collection.","Extends vector from the given collection of serialized …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the element by index or <code>None</code> if it is not present.","Returns the serialized element by index or <code>None</code> if it is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the vector contains no elements.","Iterate over deserialized elements.","Iterate over raw serialized elements.","Returns the number of elements in the vector, also …","Create new vector with zero elements. Use <code>id</code> as a unique …","","","","","","","","","Removes the last element from a vector and returns it, or …","Removes the last element from a vector and returns it …","Appends an element to the back of the collection.","Appends a serialized element to the back of the collection.","Inserts a element at <code>index</code>, returns an evicted element.","Inserts a serialized element at <code>index</code>, returns a …","","","","Removes an element from the vector and returns it. The …","Removes an element from the vector and returns it in …","","","","","","","","","","","","","","Price per 1 byte of storage from mainnet genesis config. …","Aborts the current contract execution without a custom …","The balance attached to the given account. This includes …","The balance locked for potential validator staking.","The balance that was attached to the call that will be …","Returns the height of the block the transaction is being …","Current block index.","Current block timestamp, i.e, number of …","Current block timestamp, i.e, number of …","The id of the account that owns the current contract.","Current epoch height.","The input to the contract call serialized as bytes. If …","Returns <code>true</code> if the given account ID is valid and <code>false</code> …","Hashes the random sequence of bytes using keccak256.","Hashes the bytes using the Keccak-256 hash function. This …","Hashes the random sequence of bytes using keccak512.","Hashes the bytes using the Keccak-512 hash function. This …","Log the UTF-8 encodable message.","Logs the string message message. This message is stored on …","Terminates the execution of the program with the UTF-8 …","Terminates the execution of the program with the UTF-8 …","The id of the account that was the previous contract in …","The amount of gas attached to the call that can be used to …","Creates a new promise which completes when time all …","","","","","","","","","","","","","Creates a promise that will execute a method on account …","If the current function is invoked by a callback we can …","If the current function is invoked by a callback we can …","Consider the execution result of promise under <code>promise_idx</code> …","Attaches the callback that is executed after promise …","Returns the random seed from the current block. This 32 …","Returns the random seed from the current block. This 32 …","Reads the content of the <code>register_id</code>. If register is not …","Returns the size of the register. If register is not used …","Hashes the bytes using the RIPEMD-160 hash function. This …","Replaces the current low-level blockchain interface …","Setups panic hook to expose error info to the blockchain.","Hashes the random sequence of bytes using sha256.","Hashes the bytes using the SHA-256 hash function. This …","The id of the account that either signed the original …","The public key of the account that did the signing.","Returns <code>true</code> if the contract state exists and <code>false</code> …","Load the state of the given object.","","","Reads the most recent value that was evicted with …","Checks if there is a key-value in the storage.","Reads the value stored under the given key.","Removes the value stored under the given key. If key-value …","Current total storage usage of this smart contract that …","Writes key-value into storage. If another key-value …","The gas that was already burnt during the contract …","For a given account return its current stake. If the …","Returns the total stake of validators in the current epoch.","Sets the blob of data as the return value of the contract.","","","","","","","","Helper class to serialize/deserialize <code>Vec&lt;u8&gt;</code> to base64 …","PublicKey curve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mocked blockchain that can be used in the tests for the …","","","","","","","","","","","","","","","","Returns metadata about the receipts created","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns logs created so far by the runtime.","","","","","","","","","","","","","","","","","","","","Perform function on a mutable reference to the …","","","","","","","","","","","","","","","","","","Simple VMContext builder that allows to quickly create …","","","Returns a pre-defined account_id from a list of 6.","","","","","","","","","","","","","Returns the argument unchanged.","Accessing receipts created by the contract. Only available …","Returns a copy of logs from VMLogic. Only available in …","Calls <code>U::from(self)</code>.","","","","","","","","","","Initializes the <code>MockedBlockchain</code> with a single promise …","","","","","","","","","Setup the blockchain interface with a default …","free == effectively unlimited gas Sets up the blockchain …","Updates the blockchain interface with the config passed in.","Assert that 1 yoctoNEAR was attached.","Assert that predecessor_account_id == current_account_id, …","Returns true if promise was successful. Fails if called …","Returns the result of the promise if successful. Otherwise …"],"i":[1,23,0,0,0,0,0,0,0,0,0,21,0,25,29,30,0,0,0,0,0,0,0,0,0,0,10,25,29,30,0,0,0,0,1,0,0,0,0,36,0,0,0,0,0,0,0,0,10,0,0,21,0,0,0,25,29,0,0,0,0,0,10,36,0,19,19,16,16,1,2,2,1,2,36,5,1,2,2,2,3,5,5,2,5,10,19,19,19,15,2,10,25,16,36,29,30,3,5,17,1,18,23,19,15,2,10,25,16,36,29,30,3,5,17,1,18,23,19,16,15,10,16,3,5,17,1,18,19,15,10,16,3,5,17,1,18,19,3,5,1,0,2,19,3,16,2,36,5,1,1,23,2,2,2,15,10,25,16,3,3,5,5,1,1,1,2,0,19,15,10,25,16,29,30,3,5,17,1,18,23,0,15,15,10,25,16,29,30,3,5,5,17,17,1,18,23,15,16,15,2,35,10,25,25,16,36,36,29,30,3,5,5,17,1,1,18,23,19,3,5,2,2,15,15,16,3,5,1,19,15,2,10,25,16,36,29,30,3,5,17,1,18,23,19,3,76,19,0,15,0,0,16,0,1,15,10,25,16,29,3,5,1,23,0,2,5,15,19,77,18,3,5,1,16,19,19,19,15,1,0,15,2,2,10,25,16,36,36,3,3,5,5,1,1,0,19,19,2,19,16,1,1,15,16,0,0,2,15,10,16,3,5,17,1,18,19,5,17,2,15,2,10,25,16,36,29,30,3,3,5,5,17,1,18,23,19,15,2,10,25,16,36,29,30,3,5,17,1,18,23,19,15,2,10,25,16,36,29,30,3,5,17,1,18,23,19,0,19,15,2,10,25,16,36,29,30,3,5,17,1,18,23,19,78,79,80,81,82,83,0,0,0,0,0,0,0,0,0,0,0,41,43,46,45,41,47,44,43,46,45,41,47,44,43,44,43,41,44,45,41,43,46,44,43,46,45,41,47,44,46,45,41,43,44,46,45,41,47,44,43,46,45,41,47,44,43,46,47,44,43,44,43,46,45,41,44,46,45,41,43,46,45,41,47,44,43,44,41,44,47,47,43,41,44,43,44,43,44,43,44,43,41,44,43,44,43,44,43,44,43,46,45,41,47,44,43,44,43,46,45,41,47,44,46,45,41,47,43,46,45,41,47,44,47,47,43,41,44,43,46,45,41,47,44,43,46,45,41,47,44,43,46,45,41,47,44,0,0,43,46,45,41,47,44,0,0,51,50,51,50,50,51,50,50,50,51,50,50,50,50,51,50,51,50,50,50,50,50,50,50,51,51,51,51,50,50,50,51,50,51,50,51,50,51,50,50,50,51,50,0,0,0,53,54,42,53,54,42,42,53,54,42,42,42,42,53,54,42,42,42,53,54,42,53,54,42,42,42,42,42,53,54,53,54,53,54,53,54,42,42,42,42,42,42,42,53,54,42,42,42,53,54,42,53,54,42,53,54,42,53,54,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,62,63,64,65,0,0,0,0,21,0,0,21,0,0,0,34,61,62,63,64,65,21,34,61,62,63,64,65,21,34,61,62,63,64,65,21,34,61,62,63,64,65,21,34,61,62,63,64,21,34,34,34,61,61,62,62,63,63,64,64,65,65,21,34,61,62,63,64,65,21,34,61,62,63,64,65,21,34,34,61,61,62,62,63,63,64,64,65,65,21,34,21,34,61,62,63,64,65,21,34,61,62,63,64,65,34,61,62,63,64,21,34,34,61,61,62,62,63,63,64,64,65,65,21,34,61,62,63,64,65,21,34,34,34,61,62,63,64,65,21,34,61,62,63,64,65,21,34,61,62,63,64,65,21,34,61,62,63,64,65,21,70,70,70,70,70,70,70,0,0,70,70,0,69,59,69,70,59,69,70,69,70,69,70,59,59,69,70,69,70,59,69,70,59,59,69,70,59,69,70,59,69,59,69,70,59,69,70,59,69,70,59,69,70,59,69,70,0,84,85,86,87,85,88,85,84,85,89,84,90,89,84,91,84,90,0,74,74,0,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,74,74,74,74,74,74,74,74,74,0,0,74,74,74,74,74,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,3,4,5,6],2],[[2,3,4,5,6,7],2],[[1,1]],[8],[8],[8],[8],[[2,3],2],[[2,3,7],2],[[2,2],2],[3],[5],[5,9],[2,2],[5,9],[10,[[14,[[13,[11,12]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[15,15],[10,10],[16,16],[3,3],[5,5],[17,17],[1,1],[18,18],[19,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,3],20],[[5,5],20],[[1,1],20],0,[2,2],0,[3,21],0,[[],22],[[],22],[[],22],[[],22],[[],1],[[],23],[[2,5],2],[[2,3],2],[[2,[13,[11]]],2],[[],[[24,[15]]]],[[],[[24,[10]]]],[[],[[24,[25]]]],[[],[[24,[16]]]],[[],[[26,[3]]]],[[],[[24,[3]]]],[[],[[24,[5]]]],[[],[[26,[5]]]],[[],[[24,[1,27]]]],[[],[[24,[1]]]],[[1,7],1],[2],0,0,[[15,15],28],[[10,10],28],[[25,25],28],[[16,16],28],[[29,29],28],[[30,30],28],[[3,3],28],[[5,5],28],[[17,17],28],[[1,1],28],[[18,18],28],[[23,23],28],0,0,[[15,31],[[24,[32]]]],[[10,31],[[24,[32]]]],[[25,31],[[24,[32]]]],[[16,31],[[24,[32]]]],[[29,31],33],[[30,31],33],[[3,31],33],[[5,31],33],[[5,31],33],[[17,31],33],[[17,31],33],[[1,31],33],[[18,31],33],[[23,31],33],[[],15],[[],16],[[]],[[]],[34,35],[[]],[29,25],[[]],[[]],[2,36],[[]],[[]],[[]],[[]],[37,5],[[]],[[]],[[]],[7,1],[[]],[[]],[[]],[9,[[24,[3]]]],[9,[[24,[5]]]],[[2,6,[13,[11]],4,1],2],[[2,6,[13,[11]],4,1,23],2],0,[15],[16],[3],[5],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[13,[11]]]],[[],[[13,[11]]]],[19,28],0,0,0,0,[16,7],0,[[1,7],1],[[15,15],28],[[10,10],28],[[25,25],28],[[16,16],28],[[29,29],28],[[3,3],28],[[5,5],28],[[1,1],28],[[23,23],28],0,[5,2],[6,5],[15,7],0,[[],38],[18,38],[[3,3],[[14,[20]]]],[[5,5],[[14,[20]]]],[[1,1],[[14,[20]]]],0,0,0,0,0,[[1,7]],0,[15,24],[2,[[24,[27]]]],[2,24],[10,24],[25,24],[16,24],[[[36,[39]]],[[24,[27]]]],[36,24],[3,[[24,[27]]]],[3,24],[5,[[24,[27]]]],[5,24],[1,24],[1,[[24,[27]]]],0,0,0,[[2,4,3],2],0,0,[[1,1],1],[[1,1]],[[],15],[[],16],0,0,[[2,2],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[2,4],2],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[[13,[11]]],[[24,[3]]]],[[],24],[6,[[24,[5]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[41,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43,14],[44,14],[43],[41],[44],[45,28],[41,28],[43,28],[46,28],[44,28],[[],[[24,[43,27]]]],[[],[[24,[46,27]]]],[[],[[24,[45,27]]]],[[],[[24,[41,27]]]],[[],[[24,[47,27]]]],[[],[[24,[44,27]]]],[[46,48]],[[45,48]],[[41,48]],[43,14],[44,14],[[46,31],33],[[45,31],33],[[41,31],33],[[47,31],33],[[44,31],33],[[]],[[]],[[]],[[]],[[]],[[]],[43,14],[46,14],[47,14],[44,14],[43,14],[44,14],[43,14],[46,14],[45,28],[41,28],[44,14],[46,[[14,[[13,[11]]]]]],[45,28],[41,28],[[]],[[]],[[]],[[]],[[]],[[]],[43],[44],[41,28],[44,28],[47,28],[47,28],[43,49],[41,49],[44,49],[43,49],[44,49],[43,49],[44,49],[43,49],[44,49],[43,7],[41,7],[44,7],[43,14],[44,14],[43,14],[44,14],[43,14],[44,14],[[],43],[[],46],[[],45],[[],41],[14,47],[[],44],[43,49],[44,49],[43,14],[46,14],[45,28],[41,28],[47,28],[44,14],[46,[[14,[[13,[11]]]]]],[45,28],[41,28],[47,14],[43,[[24,[27]]]],[46,[[24,[27]]]],[45,[[24,[27]]]],[41,[[24,[27]]]],[47,[[24,[27]]]],[44,[[24,[27]]]],[47,28],[47,14],[43,13],[41,13],[44,13],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[50],[51,52],[[],[[24,[50,27]]]],[[50,48]],[[50,31],33],[[]],[[]],[50,14],[50,14],[50,[[14,[[13,[11]]]]]],[[]],[[]],[[]],[50],[50,28],[50,51],[50,49],[50,42],[50,7],[[],50],[51,14],[51,14],[[51,52],14],[[51,52],14],[50,14],[50,[[14,[[13,[11]]]]]],[50,[[24,[27]]]],[51],[50,13],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[50,49],[50,42],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[42],[53,52],[54,52],[[],[[24,[42,27]]]],[[42,48]],[[42,48]],[[[42,[[0,[55,56]]]],31],33],[[]],[[]],[[]],[[42,7],14],[[42,7],[[14,[[13,[11]]]]]],[[]],[[]],[[]],[[]],[[]],[42,28],[42,54],[42,53],[42,7],[[],42],[53,14],[54,14],[53,14],[54,14],[[53,52],14],[[54,52],14],[[53,52],14],[[54,52],14],[42,14],[42,[[14,[[13,[11]]]]]],[42],[42],[[42,7]],[[42,7],[[13,[11]]]],[42,[[24,[27]]]],[53],[54],[[42,7]],[[42,7],[[13,[11]]]],[42,13],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[]],[[]],[[]],0,[[],38],[[],4],[[],4],[[],4],[[],57],[[],57],[[],7],[[],7],[[],5],[[],7],[[],[[14,[[13,[11]]]]]],[[],28],[[],[[13,[11]]]],[[]],[[],[[13,[11]]]],[[]],[[]],[9],[[],38],[9,38],[[],5],[[],1],[[],58],[[58,3,7]],[[58,3,7,4,5,9]],[58],[[58,5]],[[58,3]],[7],[[58,9,4,1]],[[58,9,4,1,23]],[[58,4,3]],[[58,4]],[5,58],[[58,5],58],[[5,9,4,1],58],[7,29],[[],7],[58],[[58,5,9,4,1],58],[[],[[13,[11]]]],[[]],[7,[[14,[[13,[11]]]]]],[7,[[14,[7]]]],[[]],[59],[[]],[[],[[13,[11]]]],[[]],[[],5],[[],3],[[],28],[[],[[14,[56]]]],[[]],[[],4],[[],[[14,[[13,[11]]]]]],[[],28],[[],[[14,[[13,[11]]]]]],[[],28],[[],60],[[],28],[[],1],[5,4],[[],4],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,34],[61,61],[62,62],[63,63],[64,64],[65,65],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,34],20],[[61,61],20],[[62,62],20],[[63,63],20],[[64,64],20],[[21,21],20],[[],34],[[],[[24,[34]]]],[[],[[24,[34,27]]]],[[],[[24,[61,27]]]],[[],[[24,[61]]]],[[],[[24,[62]]]],[[],[[24,[62,27]]]],[[],[[24,[63,27]]]],[[],[[24,[63]]]],[[],[[24,[64,27]]]],[[],[[24,[64]]]],[[],[[24,[65]]]],[[],[[24,[65,27]]]],[[],[[24,[21,27]]]],[[34,34],28],[[61,61],28],[[62,62],28],[[63,63],28],[[64,64],28],[[65,65],28],[[21,21],28],[[34,31],33],[[61,31],33],[[62,31],33],[[63,31],33],[[64,31],33],[[65,31],33],[[21,31],33],[[]],[35,34],[[]],[66,61],[7,62],[[]],[67,63],[[]],[68,64],[[]],[[[13,[11]]],65],[[]],[[]],[9,[[24,[34]]]],[9,[[24,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,34],28],[[61,61],28],[[62,62],28],[[63,63],28],[[64,64],28],[[65,65],28],[[34,34],[[14,[20]]]],[[61,61],[[14,[20]]]],[[62,62],[[14,[20]]]],[[63,63],[[14,[20]]]],[[64,64],[[14,[20]]]],[[21,21],[[14,[20]]]],[34,24],[34,[[24,[27]]]],[61,[[24,[27]]]],[61,24],[62,24],[62,[[24,[27]]]],[63,24],[63,[[24,[27]]]],[64,24],[64,[[24,[27]]]],[65,24],[65,[[24,[27]]]],[21,[[24,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[24,[34]]]],[[],24],[9,[[24,[34]]]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[69,69],[70,70],[[]],[[]],[59,[[13,[69]]]],[[],59],[[69,69],28],[[70,70],28],[[69,31],33],[[70,31],33],[[]],[[]],[[]],[[59,71]],[[]],[[]],[[]],[59,[[13,[6]]]],[[69,69],28],[[70,70],28],[[19,15,16,[13,[29]],[8,[[13,[11]],[13,[11]]]],[8,[6,4]],[14,[[73,[72]]]]],59],0,[59,[[8,[[13,[11]],[13,[11]]]]]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],40],[[],40],[[],40],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[74,4],74],[[74,4],74],[52,5],[[74,4],74],[[74,57],74],[[74,7],74],[[]],[[]],[74,19],[74,74],[[]],0,[[74,5],74],[[],74],[[74,75],74],[[]],[[],[[13,[69]]]],[[],[[13,[6]]]],[[]],[[74,28],74],[[],74],[[74,5],74],[[74,1],74],[74,74],[[74,5],74],[[74,3],74],[[74,60],74],0,[[19,29]],[[]],[[],24],[[],24],[[],40],[[]],[[],5],[[],5],[[],5],[[]],[[]],[15],[[]],[[]],[[],28],[[],[[14,[[13,[11]]]]]]],"p":[[3,"Gas"],[3,"Promise"],[3,"PublicKey"],[6,"Balance"],[3,"AccountId"],[3,"String"],[15,"u64"],[3,"HashMap"],[15,"str"],[4,"ReturnData"],[15,"u8"],[3,"Global"],[3,"Vec"],[4,"Option"],[3,"VMConfig"],[3,"RuntimeFeesConfig"],[3,"ParseAccountIdError"],[3,"Abort"],[3,"VMContext"],[4,"Ordering"],[4,"CurveType"],[6,"Declaration"],[3,"GasWeight"],[4,"Result"],[4,"VmPromiseResult"],[6,"Result"],[3,"Error"],[15,"bool"],[4,"PromiseResult"],[4,"PromiseError"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"Base58CryptoHash"],[6,"CryptoHash"],[4,"PromiseOrValue"],[3,"AccountId"],[15,"never"],[8,"BorshSerialize"],[3,"TypeId"],[3,"UnorderedSet"],[3,"Vector"],[3,"LegacyTreeMap"],[3,"TreeMap"],[3,"LookupSet"],[3,"LookupMap"],[3,"LazyOption"],[8,"IntoIterator"],[8,"Iterator"],[3,"UnorderedMap"],[3,"Iter"],[15,"usize"],[3,"RawIter"],[3,"Iter"],[8,"Debug"],[8,"BorshDeserialize"],[6,"BlockHeight"],[6,"PromiseIndex"],[3,"MockedBlockchain"],[6,"StorageUsage"],[3,"U128"],[3,"U64"],[3,"I128"],[3,"I64"],[3,"Base64VecU8"],[15,"u128"],[15,"i128"],[15,"i64"],[3,"Receipt"],[4,"VmAction"],[15,"u32"],[8,"MemoryLike"],[3,"Box"],[3,"VMContextBuilder"],[6,"EpochHeight"],[8,"IntoStorageKey"],[8,"FunctionError"],[13,"Promise"],[13,"Value"],[13,"Successful"],[13,"ReceiptIndex"],[13,"Value"],[13,"Successful"],[13,"AddKeyWithFunctionCall"],[13,"FunctionCall"],[13,"DeleteAccount"],[13,"DeployContract"],[13,"Transfer"],[13,"AddKeyWithFullAccess"],[13,"Stake"],[13,"DeleteKey"]]},\
"nft_benefits_vault":{"doc":"near-nft-benefits-vault","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Contract","ContractExt","add_replenishment_callback","add_replenishment_callback","adjust_balance","adjust_balance","balance_of","balance_of","borrow","borrow","borrow_mut","borrow_mut","default","deserialize","ext","fmt","from","from","ft_on_transfer","ft_on_transfer","get_vault","get_vault_or_create","into","into","new","new","replenishers","replenishers","serialize","store","transfer_and_adjust_balance","try_from","try_from","try_into","try_into","type_id","type_id","vault","vault","vzip","vzip","with_attached_deposit","with_static_gas","with_unused_gas_weight","withdraw","withdraw","withdraw_all","withdraw_all","withdraw_all_callback","withdraw_all_callback","withdraw_callback","withdraw_callback"],"q":["nft_benefits_vault","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Core structure of the smart contract.","","This method is used to add replenishers for the Vault. …","This method is used to add replenishers for the Vault. …","Callback invokes after each FT transfer call from this …","Callback invokes after each FT transfer call from this …","Function to view the full balance of the vault.","Function to view the full balance of the vault.","","","","","","","API for calling this contract’s functions in a …","","Returns the argument unchanged.","Returns the argument unchanged.","","","Shortcut to get vault from internal storage. Panics if …","Returns existing or new vault.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Trivial init function. Panics if the contract is already …","Trivial init function. Panics if the contract is already …","Function to view the replenishers of the vault.","Function to view the replenishers of the vault.","","Adds provided amount of tokens to the vault specified by …","Returns Promise chained pair with FT transfer and balance …","","","","","","","Function to view the amount of assets in the Vault.","Function to view the amount of assets in the Vault.","","","","","","Public function to withdraw a single type of FTs from the …","Public function to withdraw a single type of FTs from the …","Public function to withdraw all FTs from the Vault. The …","Public function to withdraw all FTs from the Vault. The …","Callback invokes after request to the NFT contract to …","Callback invokes after request to the NFT contract to …","Callback makes transfer of a single FT type to the signer …","Callback makes transfer of a single FT type to the signer …"],"i":[0,0,1,6,1,6,1,6,1,6,1,6,6,6,6,6,1,6,1,6,6,6,1,6,1,6,1,6,6,6,6,1,6,1,6,1,6,1,6,1,6,1,1,1,1,6,1,6,1,6,1,6],"f":[0,0,[[1,2,3,4,4],5],[[6,2,3,4,4]],0,0,[[1,2,3],5],[[6,2,3],[[10,[0]]]],[[]],[[]],[[]],[[]],[[],6],[[],[[9,[6,11]]]],[2,1],[[6,12],13],[[]],[[]],[[1,2,14,4],5],[[6,2,14,4],[[15,[14]]]],0,0,[[]],[[]],[1,5],[[],6],[[1,2,3],5],[[6,2,3],[[10,[[16,[0]]]]]],[6,[[9,[11]]]],0,0,[[],9],[[],9],[[],9],[[],9],[[],17],[[],17],[[1,2,3],5],[[6,2,3],[[10,[0]]]],[[]],[[]],[[1,18],1],[[1,19],1],[[1,20],1],[[1,2,3,2],5],[[6,2,3,2],5],[[1,2,3],5],[[6,2,3],5],0,0,0,0],"p":[[3,"ContractExt"],[3,"AccountId"],[6,"TokenId"],[3,"String"],[3,"Promise"],[3,"Contract"],[15,"u128"],[4,"PromiseError"],[4,"Result"],[4,"Option"],[3,"Error"],[3,"Formatter"],[6,"Result"],[3,"U128"],[4,"PromiseOrValue"],[3,"Vec"],[3,"TypeId"],[6,"Balance"],[3,"Gas"],[15,"u64"],[3,"Token"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
