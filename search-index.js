var searchIndex = JSON.parse('{\
"near_sdk":{"doc":"","t":[12,12,3,3,6,6,6,24,6,4,6,13,6,24,13,13,13,8,24,6,3,3,8,6,6,3,6,13,13,13,13,6,6,6,17,18,17,24,3,3,13,4,6,6,4,4,6,3,6,13,4,3,13,6,6,6,13,13,6,3,3,6,6,13,13,4,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,23,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,0,12,14,11,0,11,23,11,11,11,12,10,11,11,11,11,12,12,12,11,12,12,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,12,11,12,12,0,11,11,11,11,0,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,17,17,17,3,3,3,3,3,2,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,12,3,6,3,4,13,3,3,13,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,3,3,13,13,4,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,2,3,2,2,2,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,0,0,0,11,11,4,4,16,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,4,3,3,3,13,3,3,13,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,0,5,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5],"n":["0","0","Abort","AccountId","Balance","BlockHeight","BlockHeightDelta","BorshStorageKey","CryptoHash","CurveType","Duration","ED25519","EpochHeight","EventMetadata","Failed","Failed","Failed","FunctionError","FunctionError","GCCount","Gas","GasWeight","IntoStorageKey","IteratorIndex","MerkleHash","MockedBlockchain","Nonce","None","NotReady","NotReady","NotReady","NumBlocks","NumSeats","NumShards","ONE_NEAR","ONE_TERA","ONE_YOCTO","PanicOnDefault","ParseAccountIdError","Promise","Promise","PromiseError","PromiseId","PromiseIndex","PromiseOrValue","PromiseResult","ProtocolVersion","PublicKey","ReceiptIndex","ReceiptIndex","ReturnData","RuntimeFeesConfig","SECP256K1","ShardId","StorageUsage","StorageUsageChange","Successful","Successful","Timestamp","VMConfig","VMContext","ValidatorId","ValidatorMask","Value","Value","VmPromiseResult","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","account_balance","account_locked_balance","action_creation_config","action_receipt_creation_config","add","add_access_key","add_access_key_with_nonce","add_assign","add_definitions_recursively","add_definitions_recursively","add_definitions_recursively","add_definitions_recursively","add_full_access_key","add_full_access_key_with_nonce","and","as_bytes","as_bytes","as_ref","as_return","as_str","as_value","attached_deposit","block_index","block_timestamp","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","burnt_gas_reward","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","collections","create_account","current_account_id","curve_type","data_receipt_creation_config","declaration","declaration","declaration","declaration","default","default","delete_account","delete_key","deploy_contract","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","div","drop","env","epoch_height","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","ext_contract","ext_costs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","free","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","function_call","function_call_weight","grow_mem_cost","hash","hash","hash","hash","hash","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_storage_key","is_referenceable","is_referenceable","is_view","json_schema","json_schema","json_schema","json_schema","json_schema","json_types","limit_config","log","min_receipt_with_function_call_gas","mock","mul","near_bindgen","new","new_unchecked","non_crypto_hash","output_data_receivers","panic","panic","partial_cmp","partial_cmp","partial_cmp","pessimistic_gas_price_inflation_ratio","predecessor_account_id","prepaid_gas","provide","random_seed","regular_op_cost","rem","require","schema_name","schema_name","schema_name","schema_name","schema_name","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","setup_alloc","signer_account_id","signer_account_pk","stake","storage_usage","storage_usage_config","store","sub","sub_assign","test","test","test_utils","testing_env","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","transfer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utils","view_config","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","ERR_ELEMENT_DESERIALIZATION","ERR_ELEMENT_SERIALIZATION","ERR_INCONSISTENT_STATE","LazyOption","LegacyTreeMap","LookupMap","LookupSet","TreeMap","UnorderedMap","UnorderedSet","Vector","as_vector","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil_key","ceil_key","clear","clear","clear","contains","contains","contains_key","contains_key","contains_key","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","extend","extend","extend","floor_key","floor_key","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","get","get","higher","higher","insert","insert","insert","insert","insert","insert_raw","insert_raw","insert_raw","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_empty","is_none","is_some","iter","iter","iter","iter_from","iter_from","iter_rev","iter_rev","iter_rev_from","iter_rev_from","len","len","len","lower","lower","max","max","min","min","new","new","new","new","new","new","range","range","remove","remove","remove","remove","remove","remove","remove_raw","remove_raw","remove_raw","replace","serialize","serialize","serialize","serialize","serialize","serialize","set","take","to_vec","to_vec","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unordered_map","vector","vzip","vzip","vzip","vzip","vzip","vzip","Iter","UnorderedMap","borrow","borrow","borrow_mut","borrow_mut","clear","count","deserialize","extend","fmt","from","from","get","insert","insert_raw","into","into","into_iter","into_iter","is_empty","iter","keys","keys_as_vector","len","new","next","next_back","nth","nth_back","remove","remove_raw","serialize","size_hint","to_vec","try_from","try_from","try_into","try_into","type_id","type_id","values","values_as_vector","vzip","vzip","Iter","RawIter","Vector","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","count","count","deserialize","extend","extend_raw","fmt","from","from","from","get","get_raw","into","into","into","into_iter","into_iter","is_empty","iter","iter_raw","len","new","next","next","next_back","next_back","nth","nth","nth_back","nth_back","pop","pop_raw","push","push_raw","replace","replace_raw","serialize","size_hint","size_hint","swap_remove","swap_remove_raw","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","STORAGE_PRICE_PER_BYTE","abort","account_balance","account_locked_balance","attached_deposit","block_height","block_index","block_timestamp","block_timestamp_ms","current_account_id","epoch_height","input","is_valid_account_id","keccak256","keccak256_array","keccak512","keccak512_array","log","log_str","panic","panic_str","predecessor_account_id","prepaid_gas","promise_and","promise_batch_action_add_key_with_full_access","promise_batch_action_add_key_with_function_call","promise_batch_action_create_account","promise_batch_action_delete_account","promise_batch_action_delete_key","promise_batch_action_deploy_contract","promise_batch_action_function_call","promise_batch_action_function_call_weight","promise_batch_action_stake","promise_batch_action_transfer","promise_batch_create","promise_batch_then","promise_create","promise_result","promise_results_count","promise_return","promise_then","random_seed","random_seed_array","read_register","register_len","ripemd160_array","set_blockchain_interface","setup_panic_hook","sha256","sha256_array","signer_account_id","signer_account_pk","state_exists","state_read","state_write","storage_byte_cost","storage_get_evicted","storage_has_key","storage_read","storage_remove","storage_usage","storage_write","used_gas","validator_stake","validator_total_stake","value_return","0","0","0","0","0","Base58CryptoHash","Base58PublicKey","Base64VecU8","CurveType","ED25519","I128","I64","SECP256K1","U128","U64","ValidAccountId","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","into","into","into","into","into","into","into","is_referenceable","is_referenceable","is_referenceable","is_referenceable","is_referenceable","is_referenceable","json_schema","json_schema","json_schema","json_schema","json_schema","json_schema","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","schema_name","schema_name","schema_name","schema_name","schema_name","schema_name","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AddKeyWithFullAccess","AddKeyWithFunctionCall","CreateAccount","DeleteAccount","DeleteKey","DeployContract","FunctionCall","MockedBlockchain","Receipt","Stake","Transfer","VmAction","__clone_box","__clone_box","actions","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","created_receipts","default","eq","eq","fmt","fmt","from","from","from","gas","into","into","into","logs","new","receiver_id","take_storage","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_mocked_blockchain","allowance","args","beneficiary_id","code","deposit","deposit","function_name","function_names","gas","nonce","nonce","public_key","public_key","public_key","public_key","receiver_id","stake","LookupMap","LookupSet","UnorderedMap","UnorderedSet","Vector","borrow","borrow_mut","contains","deserialize","extend","fmt","from","insert","into","key","lookup_map","new","remove","serialize","try_from","try_into","type_id","unordered_map","unordered_set","vec","vzip","with_hasher","Identity","Keccak256","KeyType","Sha256","ToKey","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from","into","into","into","to_key","to_key","to_key","to_key","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Entry","LookupMap","Occupied","OccupiedEntry","Vacant","VacantEntry","and_modify","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","contains_key","deserialize","drop","entry","extend","flush","fmt","from","from","from","from","get","get","get_mut","get_mut","index","insert","insert","insert","into","into","into","into","into_key","into_mut","key","key","key","new","or_default","or_insert","or_insert_with","or_insert_with_key","remove","remove","remove_entry","serialize","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","with_hasher","0","0","Drain","Entry","Iter","IterMut","Keys","Occupied","OccupiedEntry","UnorderedMap","Vacant","VacantEntry","Values","ValuesMut","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","count","count","count","count","count","count","deserialize","drain","drop","entry","extend","flush","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","index","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","or_default","or_insert","or_insert_with","or_insert_with_key","remove","remove","remove_entry","remove_entry","serialize","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_hasher","0","0","UnorderedSet","borrow","borrow_mut","clear","contains","deserialize","difference","drain","drop","extend","flush","fmt","from","insert","intersection","into","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","len","new","remove","serialize","symmetric_difference","try_from","try_into","type_id","union","vzip","with_hasher","Drain","Iter","IterMut","Vector","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","count","count","count","deserialize","drain","drop","drop","extend","flush","fmt","fmt","fmt","fmt","from","from","from","from","get","get_mut","index","index_mut","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","len","new","next","next","next","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","pop","push","replace","serialize","set","size_hint","size_hint","size_hint","swap_remove","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","VMContextBuilder","__clone_box","account_balance","account_locked_balance","accounts","attached_deposit","block_index","block_timestamp","borrow","borrow_mut","build","clone","clone_into","context","current_account_id","default","epoch_height","from","get_created_receipts","get_logs","into","is_view","new","predecessor_account_id","prepaid_gas","random_seed","signer_account_id","signer_account_pk","storage_usage","test_env","testing_env_with_promise_results","to_owned","try_from","try_into","type_id","vzip","alice","bob","carol","setup","setup_free","setup_with_config","assert_one_yocto","assert_self","is_promise_success","promise_result_as_success"],"q":["near_sdknear_sdk::PromiseOrValue","","near_sdk::PromiseResult","near_sdk::ReturnData","","near_sdk::VmPromiseResult","near_sdk::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::collections::unordered_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::collections::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::json_typesnear_sdk::mock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::mock::VmAction","","","","","","","","","","","","","","","","","near_sdk::store","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::store::key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::store::lookup_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::store::lookup_map::Entry","","near_sdk::store::unordered_mapnear_sdk::store::unordered_map::Entry","","near_sdk::store::unordered_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::store::vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::test_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","near_sdk::test_utils::test_env","","","","","","near_sdk::utils","","",""],"d":["","","A simple type used in conjunction with FunctionError …","Account identifier. This is the human readable utf8 string …","Balance is a type for storing amounts of tokens, specified …","Height of the block.","Block height delta that measures the difference between …","<code>BorshStorageKey</code> generates implementation for …","Raw type for 32 bytes of the hash.","PublicKey curve","Raw type for duration in nanoseconds","","Height of the epoch.","NOTE: This is an internal implementation for …","","","Promise result failed.","Enables contract runtime to panic with the given type. Any …","<code>FunctionError</code> generates implementation for …","","Represents the amount of NEAR tokens in “gas units” …","Weight of unused gas to use with …","Converts Self into a <code>Vec&lt;u8&gt;</code> that is used for a storage …","","Hash used by a struct implementing the Merkle tree.","Mocked blockchain that can be used in the tests for the …","Nonce for transactions.","Method hasn’t returned any data or promise.","Current version of the protocol never returns …","Current version of the protocol never returns …","Current version of the protocol never returns this variant.","Number of blocks in current group.","Number of seats of validators (block producer or hidden …","Number of shards in current group.","Balance of one NEAR, which is 10^24 Yocto NEAR.","One Tera gas, which is 10^12 gas units.","Balance of one Yocto NEAR, which is the smallest …","<code>PanicOnDefault</code> generates implementation for <code>Default</code> trait …","","A structure representing a result of the scheduled …","","All error variants which can occur with promise results.","","Promise index that is computed only once.","When the method can return either a promise or a value, it …","When there is a callback attached to one or more contract …","","Public key in a binary format with base58 string …","An index of Receipt to append an action","The return value of the method should be taken from the …","","","","Shard index, from 0 to NUM_SHARDS - 1.","StorageUsage is used to count the amount of storage used …","StorageUsageChange is used to count the storage usage …","","","Raw type for timestamp in nanoseconds","","Context for the contract execution.","Validator identifier in current group.","Mask which validators participated in multi sign.","Method returned some value or data.","","When there is a callback attached to one or more contract …","","","","","","","","","","The balance attached to the given account. Excludes the …","The balance of locked tokens on the given account.","Describes the cost of creating a certain action, <code>Action</code>. …","Describes the cost of creating an action receipt, …","","Add an access key that is restricted to only calling a …","Add an access key with a provided nonce.","","","","","","Add full access key to the given account.","Add full access key to the given account with a provided …","Merge this promise with another promise, so that we can …","Returns a byte slice of this <code>PublicKey</code>’s contents.","Returns reference to the account ID bytes.","","A specialized, relatively low-level API method. Allows to …","Returns reference to the account ID string.","Function to extract value from ReturnData.","The balance that was attached to the call that will be …","The current block height.","The current block timestamp (number of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fraction of the burnt gas to reward to the contract …","","","","","","","","","","","","","","","","","","","","","","Collections that offer an alternative to standard …","Create account on which this promise acts.","The account id of the current contract that we are …","Get info about the CurveType for this public key","Describes the cost of creating a data receipt, <code>DataReceipt</code>.","","","","","","","Delete the given account.","Delete access key from the given account.","Deploy a smart contract to the account on which this …","","","","","","","","","","","","","Blockchain-specific methods available to the smart …","The current epoch height.","","","","","","","","","","","","","<code>ext_contract</code> takes a Rust Trait and converts it to a …","Costs for runtime externals","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","A low-level interface for making a function call to the …","A low-level interface for making a function call to the …","Gas cost of a growing memory by single page.","","","","","","The input to the contract call. Encoded as base64 string …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>PublicKey</code> into a byte vector.","Consumes self and returns <code>Vec&lt;u8&gt;</code> bytes which are used as …","","","","","","","","","Helper types for JSON serialization.","Describes limits for VM and Runtime.","Helper macro to log a message through <code>env::log_str</code>. This …","The minimum amount of gas required to create and execute a …","Mock blockchain utilities. These can only be used inside …","","This attribute macro is used on a struct and its …","Create a promise that acts on the given account.","Caller must ensure that the account id is valid.","Computes non-cryptographically-proof hash. The computation …","How many <code>DataReceipt</code>’s should receive this execution …","","","","","","Pessimistic gas price inflation ratio.","If this execution is the result of cross-contract call or …","The gas attached to the call that can be used to pay for …","","Initial seed for randomness","Gas cost of a regular operation.","","Helper macro to create assertions that will panic through …","","","","","","","","","","","","","","","","","","","","Deprecated helper function which used to generate code to …","The account id of that signed the original transaction …","The public key that was used to sign the original …","Stake the account for the given amount of tokens using the …","The account’s storage usage before the contract execution","Describes fees for storage.","Collections and types used when interacting with storage.","","","","","Testing blockchain utilities. These can only be used …","Initializes a testing environment to mock interactions …","Schedules execution of another promise right after the …","","","","","","","","","","","","Transfer tokens to the account that this promise acts on.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper methods that often used in smart contracts.","If Some, it means that execution is made in a view mode …","","","","","","","","","","","","","","","","","","","","","","","","","An persistent lazy option, that stores a value in the …","TreeMap based on AVL-tree","An non-iterable implementation of a map that stores its …","A non-iterable implementation of a set that stores its …","TreeMap based on AVL-tree","","An iterable implementation of a set that stores its …","","Returns a view of elements as a vector. It’s sometimes …","","","","","","","","","","","","","Returns the smallest key that is greater or equal to key …","Returns the smallest key that is greater or equal to key …","","Clears the map, removing all elements.","Clears the tree, removing all elements.","Returns true if the set contains an element.","Returns true if the set contains an element.","","Returns true if the map contains a given key.","Returns true if the map contains a given key.","","","","","","","Inserts all new key-values from the iterator and replaces …","","","Returns the largest key that is less or equal to key given …","Returns the largest key that is less or equal to key given …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the value corresponding to the key.","Gets the value from storage and returns it as an option.","Returns the value corresponding to the key.","Returns the smallest key that is strictly greater than key …","Returns the smallest key that is strictly greater than key …","","Inserts a key-value pair into the map. If the map did not …","Adds a value to the set. If the set did not have this …","Adds a value to the set. If the set did not have this …","Inserts a key-value pair into the tree. If the tree did …","Inserts a serialized key-value pair into the map. If the …","Inserts a serialized element into the set. If the set did …","Adds a value to the set. If the set did not have this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the set contains no elements.","","Returns <code>true</code> if the value is not present in the storage.","Returns <code>true</code> if the value is present in the storage.","Iterate all entries in ascending order: min to max, both …","Iterate over deserialized elements.","Iterate all entries in ascending order: min to max, both …","Iterate entries in ascending order: given key (exclusive) …","Iterate entries in ascending order: given key (exclusive) …","Iterate all entries in descending order: max to min, both …","Iterate all entries in descending order: max to min, both …","Iterate entries in descending order: given key (exclusive) …","Iterate entries in descending order: given key (exclusive) …","","Returns the number of elements in the set, also referred …","Returns the number of elements in the tree, also referred …","Returns the largest key that is strictly less than key …","Returns the largest key that is strictly less than key …","Returns the largest stored key from the tree","Returns the largest stored key from the tree","Returns the smallest stored key from the tree","Returns the smallest stored key from the tree","","Create a new map. Use <code>key_prefix</code> as a unique prefix for …","Create a new map. Use <code>element_prefix</code> as a unique prefix …","Create new map with zero elements. Use <code>id</code> as a unique …","Create a new lazy option with the given <code>storage_key</code> and …","Makes a new, empty TreeMap","Iterate entries in ascending order according to specified …","Iterate entries in ascending order according to specified …","","Removes a key from the map, returning the value at the key …","Removes a value from the set. Returns whether the value …","Removes a value from the set. Returns whether the value …","Removes the value from storage without reading it. Returns …","Removes a key from the tree, returning the value at the …","Removes a serialized key from the map, returning the …","Removes a serialized element from the set. Returns true if …","Removes a value from the set. Returns whether the value …","Replaces the value in the storage and returns the previous …","","","","","","","Sets the value into the storage without reading the …","Removes the value from storage and returns it as an option.","Helper function which creates a [<code>Vec&lt;(K, V)&gt;</code>] of all items …","Copies elements into an <code>std::vec::Vec</code>.","Helper function which creates a [<code>Vec&lt;(K, V)&gt;</code>] of all items …","","","","","","","","","","","","","","","","","","","A map implemented on a trie. Unlike …","A vector implemented on a trie. Unlike standard vector …","","","","","","","An iterator over each element deserialized in the …","An iterable implementation of a map that stores its …","","","","","Clears the map, removing all elements.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the value corresponding to the key.","Inserts a key-value pair into the map. If the map did not …","Inserts a serialized key-value pair into the map. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the map contains no elements.","Iterate over deserialized keys and values.","An iterator visiting all keys. The iterator element type …","Returns a view of keys as a vector. It’s sometimes …","Returns the number of elements in the map, also referred …","Create new map with zero elements. Use <code>prefix</code> as a unique …","","","","","Removes a key from the map, returning the value at the key …","Removes a serialized key from the map, returning the …","","","Copies elements into an <code>std::vec::Vec</code>.","","","","","","","An iterator visiting all values. The iterator element type …","Returns a view of values as a vector. It’s sometimes …","","","An iterator over each element deserialized in the <code>Vector</code>.","An iterator over raw serialized bytes of each element in …","An iterable implementation of vector that stores its …","","","","","","","Removes all elements from the collection.","","","","Extends vector from the given collection.","Extends vector from the given collection of serialized …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the element by index or <code>None</code> if it is not present.","Returns the serialized element by index or <code>None</code> if it is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the vector contains no elements.","Iterate over deserialized elements.","Iterate over raw serialized elements.","Returns the number of elements in the vector, also …","Create new vector with zero elements. Use <code>id</code> as a unique …","","","","","","","","","Removes the last element from a vector and returns it, or …","Removes the last element from a vector and returns it …","Appends an element to the back of the collection.","Appends a serialized element to the back of the collection.","Inserts a element at <code>index</code>, returns an evicted element.","Inserts a serialized element at <code>index</code>, returns a …","","","","Removes an element from the vector and returns it. The …","Removes an element from the vector and returns it in …","","","","","","","","","","","","","","Price per 1 byte of storage from mainnet genesis config. …","Aborts the current contract execution without a custom …","The balance attached to the given account. This includes …","The balance locked for potential validator staking.","The balance that was attached to the call that will be …","Returns the height of the block the transaction is being …","Current block index.","Current block timestamp, i.e, number of …","Current block timestamp, i.e, number of …","The id of the account that owns the current contract.","Current epoch height.","The input to the contract call serialized as bytes. If …","Returns <code>true</code> if the given account ID is valid and <code>false</code> …","Hashes the random sequence of bytes using keccak256.","Hashes the bytes using the Keccak-256 hash function. This …","Hashes the random sequence of bytes using keccak512.","Hashes the bytes using the Keccak-512 hash function. This …","Log the UTF-8 encodable message.","Logs the string message message. This message is stored on …","Terminates the execution of the program with the UTF-8 …","Terminates the execution of the program with the UTF-8 …","The id of the account that was the previous contract in …","The amount of gas attached to the call that can be used to …","Creates a new promise which completes when time all …","","","","","","","","","","","","","Creates a promise that will execute a method on account …","If the current function is invoked by a callback we can …","If the current function is invoked by a callback we can …","Consider the execution result of promise under <code>promise_idx</code> …","Attaches the callback that is executed after promise …","Returns the random seed from the current block. This 32 …","Returns the random seed from the current block. This 32 …","Reads the content of the <code>register_id</code>. If register is not …","Returns the size of the register. If register is not used …","Hashes the bytes using the RIPEMD-160 hash function. This …","Replaces the current low-level blockchain interface …","Setups panic hook to expose error info to the blockchain.","Hashes the random sequence of bytes using sha256.","Hashes the bytes using the SHA-256 hash function. This …","The id of the account that either signed the original …","The public key of the account that did the signing.","Returns <code>true</code> if the contract state exists and <code>false</code> …","Load the state of the given object.","","","Reads the most recent value that was evicted with …","Checks if there is a key-value in the storage.","Reads the value stored under the given key.","Removes the value stored under the given key. If key-value …","Current total storage usage of this smart contract that …","Writes key-value into storage. If another key-value …","The gas that was already burnt during the contract …","For a given account return its current stake. If the …","Returns the total stake of validators in the current epoch.","Sets the blob of data as the return value of the contract.","","","","","","","","Helper class to serialize/deserialize <code>Vec&lt;u8&gt;</code> to base64 …","PublicKey curve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mocked blockchain that can be used in the tests for the …","","","","","","","","","","","","","","","","","","Returns metadata about the receipts created","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns logs created so far by the runtime.","","","","","","","","","","","","","","","","","","Perform function on a mutable reference to the …","","","","","","","","","","","","","","","","","","","A non-iterable implementation of a set that stores its …","","","","","","Returns <code>true</code> if the set contains the specified value.","","","","Returns the argument unchanged.","Adds a value to the set.","Calls <code>U::from(self)</code>.","Storage key hash function types and trait to override map …","","Initialize new <code>LookupSet</code> with the prefix provided.","Removes a value from the set. Returns whether the value …","","","","","","","A growable array type with values persisted to storage and …","","Initialize a <code>LookupSet</code> with a custom hash function.","Identity hash which just prefixes all of the serializes …","Keccak256 hash helper which hashes through a syscall. This …","Output type for the generated lookup key.","Sha256 hash helper which hashes through a syscall. This …","Trait used to generate keys to store data based on a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A view into a single entry in the map, which can be vacant …","A non-iterable, lazily loaded storage map that stores its …","","View into an occupied entry in a <code>LookupMap</code>. This is part …","","View into a vacant entry in a <code>LookupMap</code>. This is part of …","Provides in-place mutable access to an occupied entry …","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","","","Gets the given key’s corresponding entry in the map for …","","Flushes the intermediate values of the map before this is …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the value in the entry.","Returns a reference to the value corresponding to the key.","Gets a mutable reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Returns reference to value corresponding to key.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Take ownership of the key.","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Create a new <code>LookupMap</code> with the prefix provided.","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the value at the key …","Take the ownership of the key and value from the map.","","Overwrites the current value for the given key.","","","","","","","","","","","","","","","","","Initialize a <code>LookupMap</code> with a custom hash function.","","","A draining iterator for <code>UnorderedMap&lt;K, V, H&gt;</code>.","A view into a single entry in the map, which can be vacant …","An iterator over elements of a <code>UnorderedMap</code>.","A mutable iterator over elements of a <code>UnorderedMap</code>.","An iterator over the keys of a <code>UnorderedMap</code>.","","View into an occupied entry in a <code>UnorderedMap</code>. This is …","A lazily loaded storage map that stores its content …","","View into a vacant entry in a <code>UnorderedMap</code>. This is part …","An iterator over the values of a <code>UnorderedMap</code>.","A mutable iterator over values of a <code>UnorderedMap</code>.","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all key-value pairs. Keeps the …","Returns <code>true</code> if the map contains a value for the specified …","","","","","","","","Clears the map, returning all key-value pairs as an …","","Gets the given key’s corresponding entry in the map for …","","Flushes the intermediate values of the map before this is …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the value in the entry.","Returns a reference to the value corresponding to the key.","Gets a mutable reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Returns reference to value corresponding to key.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Take ownership of the key.","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns true if there are no elements inside of the map.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","An iterator visiting all keys in arbitrary order. The …","Return the amount of elements inside of the map.","Create a new iterable map. Use <code>prefix</code> as a unique prefix …","","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Takes the value out of the entry, and returns it.","Removes a key from the map, returning the value at the key …","Take the ownership of the key and value from the map.","Removes a key from the map, returning the stored key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values in arbitrary order. The …","A mutable iterator visiting all values in arbitrary order. …","","","","","","","","","","","Initialize a <code>UnorderedMap</code> with a custom hash function.","","","A lazily loaded storage set that stores its content …","","","Clears the set, removing all values.","Returns <code>true</code> if the set contains the specified value.","","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","","","Flushes the intermediate values of the map before this is …","","Returns the argument unchanged.","Adds a value to the set.","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns true if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","Create a new iterable set. Use <code>prefix</code> as a unique prefix …","Removes a value from the set. Returns whether the value …","","Visits the values representing the symmetric difference, …","","","","Visits the values representing the union, i.e., all the …","","Initialize a <code>UnorderedSet</code> with a custom hash function.","A draining iterator for <code>Vector&lt;T&gt;</code>.","An iterator over references to each element in the stored …","An iterator over exclusive references to each element of a …","An iterable implementation of vector that stores its …","","","","","","","","","Removes all elements from the collection. This will remove …","","","","","Creates a draining iterator that removes the specified …","","","","Flushes the cache and writes all modified values to …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the element by index or <code>None</code> if it is not present.","Returns a mutable reference to the element at the <code>index</code> …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if the vector contains no elements.","Returns an iterator over the vector. This iterator will …","Returns an iterator over the <code>Vector</code> that allows modifying …","Returns the number of elements in the vector, also …","Create new vector with zero elements. Prefixes storage …","","","","","","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element to the back of the collection.","Inserts a element at <code>index</code>, returns an evicted element.","","Sets a value at a given index to the value provided. This …","","","","Removes an element from the vector and returns it. The …","","","","","","","","","","","","","","","","","Simple VMContext builder that allows to quickly create …","","","","Returns a pre-defined account_id from a list of 6.","","","","","","","","","","","","","Returns the argument unchanged.","Accessing receipts created by the contract. Only available …","Returns a copy of logs from VMLogic. Only available in …","Calls <code>U::from(self)</code>.","","","","","","","","","","Initializes the <code>MockedBlockchain</code> with a single promise …","","","","","","","","","Setup the blockchain interface with a default …","free == effectively unlimited gas Sets up the blockchain …","Updates the blockchain interface with the config passed in.","Assert that 1 yoctoNEAR was attached.","Assert that predecessor_account_id == current_account_id, …","Returns true if promise was successful. Fails if called …","Returns the result of the promise if successful. Otherwise …"],"i":[2,24,0,0,0,0,0,0,0,0,0,22,0,0,26,30,31,0,0,0,0,0,0,0,0,0,0,11,26,30,31,0,0,0,0,2,0,0,0,0,37,0,0,0,0,0,0,0,0,11,0,0,22,0,0,0,26,30,0,0,0,0,0,11,37,0,16,11,17,4,6,18,2,19,20,20,20,17,17,2,3,3,2,3,37,6,2,3,3,3,4,6,6,3,6,11,20,20,20,16,11,26,17,3,37,30,31,4,6,18,2,19,24,20,16,11,26,17,3,37,30,31,4,6,18,2,19,24,20,17,16,11,17,4,6,18,2,19,20,16,11,17,4,6,18,2,19,20,4,6,2,0,3,20,4,17,3,37,6,2,2,24,3,3,3,16,11,26,17,4,4,6,6,2,2,2,3,0,20,16,11,26,17,30,31,4,6,18,2,19,24,0,16,16,11,26,17,30,31,4,6,6,18,18,2,19,24,16,17,16,11,26,26,17,3,36,37,37,30,31,4,6,6,18,2,2,19,24,20,4,6,3,3,16,16,17,4,6,2,20,16,11,26,17,3,37,30,31,4,6,18,2,19,24,20,4,104,4,2,20,3,37,4,6,2,0,16,0,17,0,2,0,3,6,16,20,105,19,4,6,2,17,20,20,18,20,16,2,0,3,37,4,6,2,16,11,26,17,3,3,37,37,4,4,6,6,2,2,0,20,20,3,20,17,0,2,2,16,17,0,0,3,16,11,17,4,6,18,2,19,20,6,18,3,16,11,26,17,3,37,30,31,4,4,6,6,18,2,19,24,20,16,11,26,17,3,37,30,31,4,6,18,2,19,24,20,16,11,26,17,3,37,30,31,4,6,18,2,19,24,20,0,20,16,11,26,17,3,37,30,31,4,6,18,2,19,24,20,106,107,108,109,110,111,0,0,0,0,0,0,0,0,0,0,0,45,47,50,49,45,51,48,47,50,49,45,51,48,47,48,47,45,48,49,45,47,50,48,47,50,49,45,51,48,50,49,45,47,48,50,49,45,51,48,47,50,49,45,51,48,47,50,51,48,47,48,47,50,49,45,48,50,49,45,47,50,49,45,51,48,47,48,45,48,51,51,47,45,48,47,48,47,48,47,48,47,45,48,47,48,47,48,47,48,47,50,49,45,51,48,47,48,47,50,49,45,51,48,50,49,45,51,47,50,49,45,51,48,51,51,47,45,48,47,50,49,45,51,48,47,50,49,45,51,48,47,50,49,45,51,48,0,0,47,50,49,45,51,48,0,0,55,54,55,54,54,55,54,54,54,55,54,54,54,54,55,54,55,54,54,54,54,54,54,54,55,55,55,55,54,54,54,55,54,55,54,55,54,55,54,54,54,55,54,0,0,0,57,58,46,57,58,46,46,57,58,46,46,46,46,57,58,46,46,46,57,58,46,57,58,46,46,46,46,46,57,58,57,58,57,58,57,58,46,46,46,46,46,46,46,57,58,46,46,46,57,58,46,57,58,46,57,58,46,57,58,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,66,67,68,69,0,0,0,0,22,0,0,22,0,0,0,35,65,66,67,68,69,22,35,65,66,67,68,69,22,35,65,66,67,68,69,22,35,65,66,67,68,69,22,35,65,66,67,68,69,22,35,65,66,67,68,22,35,35,35,65,65,66,66,67,67,68,68,69,69,22,35,65,66,67,68,69,22,35,65,66,67,68,69,22,35,35,65,65,66,66,67,67,68,68,69,69,22,35,22,35,65,66,67,68,69,22,35,65,66,67,68,69,35,65,66,67,68,69,35,65,66,67,68,22,35,65,66,67,68,69,35,35,65,65,66,66,67,67,68,68,69,69,22,35,65,66,67,68,69,22,35,35,35,65,66,67,68,69,22,35,65,66,67,68,69,22,35,65,66,67,68,69,22,35,65,66,67,68,69,22,74,74,74,74,74,74,74,0,0,74,74,0,73,74,73,63,73,74,63,73,74,73,74,73,74,63,63,73,74,73,74,63,73,74,63,63,73,74,63,63,73,63,73,74,63,73,74,63,73,74,63,73,74,63,73,74,0,112,113,114,115,113,116,113,112,113,117,112,118,117,112,119,112,118,0,0,0,0,0,78,78,78,78,78,78,78,78,78,0,0,78,78,78,78,78,78,0,0,0,78,78,0,0,120,0,0,80,81,79,80,81,79,80,81,80,81,80,81,80,81,80,81,79,80,81,79,80,81,120,79,80,81,80,81,79,80,81,79,80,81,79,80,81,79,80,81,0,0,82,0,82,0,82,82,84,85,83,82,84,85,83,83,83,83,83,83,83,83,82,84,85,83,84,83,84,83,83,84,85,83,82,84,85,83,85,84,82,84,85,83,82,82,82,82,84,83,84,83,83,82,84,85,83,82,84,85,83,82,84,85,83,82,84,85,83,83,121,122,0,0,0,0,0,87,0,0,87,0,0,0,87,87,95,96,89,90,91,92,93,88,94,87,95,96,89,90,91,92,93,88,94,88,88,89,90,91,92,93,94,88,88,88,88,88,88,88,94,87,95,96,89,90,91,92,93,88,94,95,88,95,88,88,95,96,88,87,95,96,89,90,91,92,93,88,94,89,90,91,92,93,88,88,94,96,95,88,88,88,87,95,96,88,88,88,89,90,91,92,93,94,89,90,91,92,93,94,89,90,92,93,89,90,92,93,87,87,87,87,95,88,95,88,88,89,90,91,92,93,94,87,95,96,89,90,91,92,93,88,94,87,95,96,89,90,91,92,93,88,94,87,95,96,89,90,91,92,93,88,94,88,88,87,95,96,89,90,91,92,93,88,94,88,123,124,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,0,0,98,99,100,101,98,99,100,101,98,99,100,101,98,98,98,101,98,98,98,99,100,101,98,99,100,101,98,98,98,98,98,99,100,101,98,98,99,100,101,98,98,98,98,98,99,100,101,99,100,101,99,100,101,99,100,101,98,98,98,98,98,99,100,101,98,98,99,100,101,98,99,100,101,98,99,100,101,98,99,100,101,0,102,102,102,0,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,102,102,102,102,102,102,102,102,102,0,0,102,102,102,102,102,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],0,0,0,0,[[2,2],2],[[3,4,5,6,7],3],[[3,4,5,6,7,8],3],[[2,2]],[9],[9],[9],[9],[[3,4],3],[[3,4,8],3],[[3,3],3],[4],[6],[6,10],[3,3],[6,10],[11,[[15,[[14,[12,13]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[16,16],[11,11],[17,17],[4,4],[6,6],[18,18],[2,2],[19,19],[20,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,4],21],[[6,6],21],[[2,2],21],0,[3,3],0,[4,22],0,[[],23],[[],23],[[],23],[[],23],[[],2],[[],24],[[3,6],3],[[3,4],3],[[3,[14,[12]]],3],[[],[[25,[16]]]],[[],[[25,[11]]]],[[],[[25,[26]]]],[[],[[25,[17]]]],[[],[[27,[4]]]],[[],[[25,[4]]]],[[],[[25,[6]]]],[[],[[27,[6]]]],[[],[[25,[2,28]]]],[[],[[25,[2]]]],[[2,8],2],[3],0,0,[[16,16],29],[[11,11],29],[[26,26],29],[[17,17],29],[[30,30],29],[[31,31],29],[[4,4],29],[[6,6],29],[[18,18],29],[[2,2],29],[[19,19],29],[[24,24],29],0,0,[[16,32],[[25,[33]]]],[[11,32],[[25,[33]]]],[[26,32],[[25,[33]]]],[[17,32],[[25,[33]]]],[[30,32],34],[[31,32],34],[[4,32],34],[[6,32],34],[[6,32],34],[[18,32],34],[[18,32],34],[[2,32],34],[[19,32],34],[[24,32],34],[[],16],[[],17],[[]],[[]],[[]],[30,26],[[]],[[]],[35,36],[3,37],[[]],[[]],[[]],[[]],[38,6],[[]],[[]],[[]],[8,2],[[]],[[]],[[]],[10,[[25,[4]]]],[10,[[25,[6]]]],[[3,7,[14,[12]],5,2],3],[[3,7,[14,[12]],5,2,24],3],0,[16],[17],[4],[6],[2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[14,[12]]]],[[],[[14,[12]]]],[[],29],[[],29],[20,29],[39,40],[39,40],[39,40],[39,40],[39,40],0,0,0,[17,8],0,[[2,8],2],0,[6,3],[7,6],[16,8],0,[[],41],[19,41],[[4,4],[[15,[21]]]],[[6,6],[[15,[21]]]],[[2,2],[[15,[21]]]],0,0,0,[42],0,0,[[2,8]],0,[[],7],[[],7],[[],7],[[],7],[[],7],[16,25],[11,25],[26,25],[17,25],[3,25],[3,[[25,[28]]]],[[[37,[43]]],[[25,[28]]]],[37,25],[4,[[25,[28]]]],[4,25],[6,25],[6,[[25,[28]]]],[2,[[25,[28]]]],[2,25],0,0,0,[[3,5,4],3],0,0,0,[[2,2],2],[[2,2]],[[],16],[[],17],0,0,[[3,3],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[3,5],3],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[[14,[12]]],[[25,[4]]]],[[],25],[[],25],[7,[[25,[6]]]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[45,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,15],[48,15],[47],[45],[48],[49,29],[45,29],[47,29],[50,29],[48,29],[[],[[25,[47,28]]]],[[],[[25,[50,28]]]],[[],[[25,[49,28]]]],[[],[[25,[45,28]]]],[[],[[25,[51,28]]]],[[],[[25,[48,28]]]],[[50,52]],[[49,52]],[[45,52]],[47,15],[48,15],[[50,32],34],[[49,32],34],[[45,32],34],[[51,32],34],[[48,32],34],[[]],[[]],[[]],[[]],[[]],[[]],[47,15],[50,15],[51,15],[48,15],[47,15],[48,15],[47,15],[50,15],[49,29],[45,29],[48,15],[50,[[15,[[14,[12]]]]]],[49,29],[45,29],[[]],[[]],[[]],[[]],[[]],[[]],[47],[48],[45,29],[48,29],[51,29],[51,29],[47,53],[45,53],[48,53],[47,53],[48,53],[47,53],[48,53],[47,53],[48,53],[47,8],[45,8],[48,8],[47,15],[48,15],[47,15],[48,15],[47,15],[48,15],[[],47],[[],50],[[],49],[[],45],[15,51],[[],48],[47,53],[48,53],[47,15],[50,15],[49,29],[45,29],[51,29],[48,15],[50,[[15,[[14,[12]]]]]],[49,29],[45,29],[51,15],[47,[[25,[28]]]],[50,[[25,[28]]]],[49,[[25,[28]]]],[45,[[25,[28]]]],[51,[[25,[28]]]],[48,[[25,[28]]]],[51,29],[51,15],[47,14],[45,14],[48,14],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[54],[55,56],[[],[[25,[54,28]]]],[[54,52]],[[54,32],34],[[]],[[]],[54,15],[54,15],[54,[[15,[[14,[12]]]]]],[[]],[[]],[[]],[54],[54,29],[54,55],[54,53],[54,46],[54,8],[[],54],[55,15],[55,15],[[55,56],15],[[55,56],15],[54,15],[54,[[15,[[14,[12]]]]]],[54,[[25,[28]]]],[55],[54,14],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[54,53],[54,46],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[46],[57,56],[58,56],[[],[[25,[46,28]]]],[[46,52]],[[46,52]],[[[46,[[0,[59,60]]]],32],34],[[]],[[]],[[]],[[46,8],15],[[46,8],[[15,[[14,[12]]]]]],[[]],[[]],[[]],[[]],[[]],[46,29],[46,58],[46,57],[46,8],[[],46],[57,15],[58,15],[57,15],[58,15],[[57,56],15],[[58,56],15],[[57,56],15],[[58,56],15],[46,15],[46,[[15,[[14,[12]]]]]],[46],[46],[[46,8]],[[46,8],[[14,[12]]]],[46,[[25,[28]]]],[57],[58],[[46,8]],[[46,8],[[14,[12]]]],[46,14],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[]],[[]],[[]],0,[[],41],[[],5],[[],5],[[],5],[[],61],[[],61],[[],8],[[],8],[[],6],[[],8],[[],[[15,[[14,[12]]]]]],[[],29],[[],[[14,[12]]]],[[]],[[],[[14,[12]]]],[[]],[[]],[10],[[],41],[10,41],[[],6],[[],2],[[],62],[[62,4,8]],[[62,4,8,5,6,10]],[62],[[62,6]],[[62,4]],[8],[[62,10,5,2]],[[62,10,5,2,24]],[[62,5,4]],[[62,5]],[6,62],[[62,6],62],[[6,10,5,2],62],[8,30],[[],8],[62],[[62,6,10,5,2],62],[[],[[14,[12]]]],[[]],[8,[[15,[[14,[12]]]]]],[8,[[15,[8]]]],[[]],[63],[[]],[[],[[14,[12]]]],[[]],[[],6],[[],4],[[],29],[[],[[15,[60]]]],[[]],[[],5],[[],[[15,[[14,[12]]]]]],[[],29],[[],[[15,[[14,[12]]]]]],[[],29],[[],64],[[],29],[[],2],[6,5],[[],5],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[65,65],[66,66],[67,67],[68,68],[69,69],[22,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[35,35],21],[[65,65],21],[[66,66],21],[[67,67],21],[[68,68],21],[[22,22],21],[[],35],[[],[[25,[35,28]]]],[[],[[25,[35]]]],[[],[[25,[65,28]]]],[[],[[25,[65]]]],[[],[[25,[66]]]],[[],[[25,[66,28]]]],[[],[[25,[67]]]],[[],[[25,[67,28]]]],[[],[[25,[68]]]],[[],[[25,[68,28]]]],[[],[[25,[69]]]],[[],[[25,[69,28]]]],[[],[[25,[22,28]]]],[[35,35],29],[[65,65],29],[[66,66],29],[[67,67],29],[[68,68],29],[[69,69],29],[[22,22],29],[[35,32],34],[[65,32],34],[[66,32],34],[[67,32],34],[[68,32],34],[[69,32],34],[[22,32],34],[[]],[36,35],[[]],[70,65],[8,66],[[]],[71,67],[[]],[[]],[72,68],[[]],[[[14,[12]]],69],[[]],[10,[[25,[35]]]],[10,[[25,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[39,40],[39,40],[39,40],[39,40],[39,40],[39,40],[[35,35],[[15,[21]]]],[[65,65],[[15,[21]]]],[[66,66],[[15,[21]]]],[[67,67],[[15,[21]]]],[[68,68],[[15,[21]]]],[[22,22],[[15,[21]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[35,[[25,[28]]]],[35,25],[65,[[25,[28]]]],[65,25],[66,[[25,[28]]]],[66,25],[67,25],[67,[[25,[28]]]],[68,[[25,[28]]]],[68,25],[69,25],[69,[[25,[28]]]],[22,[[25,[28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[25,[35]]]],[10,[[25,[35]]]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[74,74],[[]],[[]],[63,[[14,[73]]]],[[],63],[[73,73],29],[[74,74],29],[[73,32],34],[[74,32],34],[[]],[[]],[[]],[[63,75]],[[]],[[]],[[]],[63,[[14,[7]]]],[[20,16,17,[14,[30]],[9,[[14,[12]],[14,[12]]]],[9,[7,5]],[15,[[77,[76]]]]],63],0,[63,[[9,[[14,[12]],[14,[12]]]]]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[78,29],[[],[[25,[78,28]]]],[78],[[78,32],34],[[]],[78,29],[[]],0,0,[[],[[78,[79]]]],[78,29],[78,[[25,[28]]]],[[],25],[[],25],[[],44],0,0,0,[[]],[[],78],0,0,0,0,0,[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[80,80],[81,81],[[]],[[]],[[80,80],29],[[81,81],29],[[80,32],34],[[81,32],34],[[]],[[]],[[]],[[]],[[]],[[]],[14],[14],[14],[14],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[]],[[]],[[]],0,0,0,0,0,0,[82,82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,29],[[],[[25,[83,28]]]],[83],[83,82],[83],[83],[[83,32],34],[[]],[[]],[[]],[[]],[84],[83,15],[84],[83,15],[83],[84],[85],[83,15],[[]],[[]],[[]],[[]],[85],[84],[82],[84],[85],[[],[[83,[79]]]],[82],[82],[[82,86]],[[82,86]],[84],[83,15],[84],[83,[[25,[28]]]],[[83,15]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[],44],[[]],[[]],[[]],[[]],[[],83],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[87,87],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88],[88,29],[89,56],[90,56],[91,56],[92,56],[93,56],[94,56],[[],[[25,[88,28]]]],[88,94],[88],[88,87],[88],[88],[[88,32],34],[[[94,[59,59,59]],32],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[95],[88,15],[95],[88,15],[88],[95],[96],[88,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88],[88],[[]],[96],[95],[88,29],[88,89],[88,90],[87],[95],[96],[88,91],[88,75],[[],[[88,[80]]]],[89,15],[90,15],[91,15],[92,15],[93,15],[94,15],[89,15],[90,15],[91,15],[92,15],[93,15],[94,15],[[89,56],15],[[90,56],15],[[92,56],15],[[93,56],15],[[89,56],15],[[90,56],15],[[92,56],15],[[93,56],15],[87],[87],[[87,86]],[[87,86]],[95],[88,15],[95],[88,15],[88,[[25,[28]]]],[89],[90],[91],[92],[93],[94],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],[88,92],[88,93],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],88],0,0,0,[[]],[[]],[97],[97,29],[[],[[25,[97,28]]]],0,0,[97],[97],[97],[[97,32],34],[[]],[97,29],0,[[]],[97],[[97,97],29],[97,29],[[97,97],29],[[97,97],29],0,[97,75],[[],[[97,[80]]]],[97,29],[97,[[25,[28]]]],0,[[],25],[[],25],[[],44],0,[[]],[[],97],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[98],[99,56],[100,56],[101,56],[[],[[25,[98,28]]]],[98,101],[98],[101],[98],[98],[[98,32],34],[[[99,[59]],32],34],[[[100,[59]],32],34],[[[101,[59]],32],34],[[]],[[]],[[]],[[]],[[98,75],15],[[98,75],15],[[98,75]],[[98,75]],[[]],[[]],[[]],[[]],[98],[98],[[]],[[]],[[]],[98,29],[98,99],[98,100],[98,75],[[],98],[99,15],[100,15],[101,15],[99,15],[100,15],[101,15],[[99,56],15],[[100,56],15],[[101,56],15],[[99,56],15],[[100,56],15],[[101,56],15],[98,15],[98],[[98,75]],[98,[[25,[28]]]],[[98,75]],[99],[100],[101],[[98,75]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],44],[[],44],[[],44],[[],44],[[]],[[]],[[]],[[]],0,[1],[[102,5],102],[[102,5],102],[56,6],[[102,5],102],[[102,61],102],[[102,8],102],[[]],[[]],[102,20],[102,102],[[]],0,[[102,6],102],[[],102],[[102,103],102],[[]],[[],[[14,[73]]]],[[],[[14,[7]]]],[[]],[[102,29],102],[[],102],[[102,6],102],[[102,2],102],[102,102],[[102,6],102],[[102,4],102],[[102,64],102],0,[[20,30]],[[]],[[],25],[[],25],[[],44],[[]],[[],6],[[],6],[[],6],[[]],[[]],[16],[[]],[[]],[[],29],[[],[[15,[[14,[12]]]]]]],"p":[[3,"Private"],[3,"Gas"],[3,"Promise"],[3,"PublicKey"],[6,"Balance"],[3,"AccountId"],[3,"String"],[15,"u64"],[3,"HashMap"],[15,"str"],[4,"ReturnData"],[15,"u8"],[3,"Global"],[3,"Vec"],[4,"Option"],[3,"VMConfig"],[3,"RuntimeFeesConfig"],[3,"ParseAccountIdError"],[3,"Abort"],[3,"VMContext"],[4,"Ordering"],[4,"CurveType"],[6,"Declaration"],[3,"GasWeight"],[4,"Result"],[4,"VmPromiseResult"],[6,"Result"],[3,"Error"],[15,"bool"],[4,"PromiseResult"],[4,"PromiseError"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"Base58CryptoHash"],[6,"CryptoHash"],[4,"PromiseOrValue"],[3,"AccountId"],[3,"SchemaGenerator"],[4,"Schema"],[15,"never"],[3,"Demand"],[8,"BorshSerialize"],[3,"TypeId"],[3,"UnorderedSet"],[3,"Vector"],[3,"LegacyTreeMap"],[3,"TreeMap"],[3,"LookupSet"],[3,"LookupMap"],[3,"LazyOption"],[8,"IntoIterator"],[8,"Iterator"],[3,"UnorderedMap"],[3,"Iter"],[15,"usize"],[3,"RawIter"],[3,"Iter"],[8,"Debug"],[8,"BorshDeserialize"],[6,"BlockHeight"],[6,"PromiseIndex"],[3,"MockedBlockchain"],[6,"StorageUsage"],[3,"U128"],[3,"U64"],[3,"I128"],[3,"I64"],[3,"Base64VecU8"],[15,"u128"],[15,"i128"],[15,"i64"],[3,"Receipt"],[4,"VmAction"],[15,"u32"],[8,"MemoryLike"],[3,"Box"],[3,"LookupSet"],[4,"Identity"],[4,"Sha256"],[4,"Keccak256"],[4,"Entry"],[3,"LookupMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"FnOnce"],[4,"Entry"],[3,"UnorderedMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"UnorderedSet"],[3,"Vector"],[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"VMContextBuilder"],[6,"EpochHeight"],[8,"IntoStorageKey"],[8,"FunctionError"],[13,"Promise"],[13,"Value"],[13,"Successful"],[13,"ReceiptIndex"],[13,"Value"],[13,"Successful"],[13,"AddKeyWithFunctionCall"],[13,"FunctionCall"],[13,"DeleteAccount"],[13,"DeployContract"],[13,"Transfer"],[13,"AddKeyWithFullAccess"],[13,"Stake"],[13,"DeleteKey"],[8,"ToKey"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"]]},\
"nft_benefits_vault":{"doc":"near-nft-benefits-vault","t":[3,3,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Contract","ContractExt","add_replenishment_callback","add_replenishment_callback","adjust_balance","adjust_balance","balance_of","balance_of","borrow","borrow","borrow_mut","borrow_mut","calls","default","deserialize","ext","fmt","from","from","ft_on_transfer","ft_on_transfer","get_vault","get_vault_or_create","into","into","new","new","replenishers","replenishers","serialize","store","transfer_to","try_from","try_from","try_into","try_into","type_id","type_id","vault_assets_count","vault_assets_count","vzip","vzip","with_attached_deposit","with_static_gas","with_unused_gas_weight","withdraw","withdraw","withdraw_all","withdraw_all","withdraw_all_callback","withdraw_all_callback","withdraw_amount","withdraw_amount","withdraw_callback","withdraw_callback"],"q":["nft_benefits_vault","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Core structure of the smart contract.","","","This method is used to add replenishers for the Vault. …","","Callback invokes after each FT transfer call from this …","","Function to view balances of all assets in the vault.","","","","","","","","API for calling this contract’s functions in a …","","Returns the argument unchanged.","Returns the argument unchanged.","","Gas consumption:","Shortcut to get vault from internal storage. Panics if …","Returns existing or new vault.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Trivial init function. Panics if the contract is already …","","Function to view the replenishers of the vault.","","Adds provided amount of tokens to the vault specified by …","","","","","","","","","Function to view the amount of assets in the Vault.","","","","","","","Public call to withdraw all tokens of a single type of FT …","","Public call to withdraw all FTs of every type from the …","","Callback invokes after request to the NFT contract to …","","Public call to withdraw specified <code>amount</code> of tokens of a …","","Callback makes transfer of a single FT type to the signer …"],"i":[0,0,1,6,1,6,1,6,1,6,1,6,0,6,6,6,6,1,6,1,6,6,6,1,6,1,6,1,6,6,6,6,1,6,1,6,1,6,1,6,1,6,1,1,1,1,6,1,6,1,6,1,6,1,6],"f":[0,0,[[1,2,3,4,4],5],[[6,2,3,4,4]],0,0,[[1,2,3],5],[[6,2,3],[[10,[0]]]],[[]],[[]],[[]],[[]],0,[[],6],[[],[[9,[6,11]]]],[2,1],[[6,12],13],[[]],[[]],[[1,2,7,4],5],[[6,2,7,4],[[14,[7]]]],0,0,[[]],[[]],[1,5],[[],6],[[1,2,3],5],[[6,2,3],[[10,[[15,[0]]]]]],[6,[[9,[11]]]],0,[[2,2,16],5],[[],9],[[],9],[[],9],[[],9],[[],17],[[],17],[[1,2,3],5],[[6,2,3],[[10,[0]]]],[[]],[[]],[[1,18],1],[[1,19],1],[[1,20],1],[[1,2,3,2],5],[[6,2,3,2],5],[[1,2,3],5],[[6,2,3],5],0,0,[[1,2,3,2,7],5],[[6,2,3,2,7]],0,0],"p":[[3,"ContractExt"],[3,"AccountId"],[6,"TokenId"],[3,"String"],[3,"Promise"],[3,"Contract"],[3,"U128"],[4,"PromiseError"],[4,"Result"],[4,"Option"],[3,"Error"],[3,"Formatter"],[6,"Result"],[4,"PromiseOrValue"],[3,"Vec"],[15,"u128"],[3,"TypeId"],[6,"Balance"],[3,"Gas"],[15,"u64"],[3,"Token"],[15,"bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
